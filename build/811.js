"use strict";(self.webpackChunkmerpress=self.webpackChunkmerpress||[]).push([[811],{9830:function(e,t,n){n.d(t,{c:function(){return r}});var i=n(2819);function r(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:d(e),edges:a(e)};return i.isUndefined(e.graph())||(t.value=i.clone(e.graph())),t}function d(e){return i.map(e.nodes(),(function(t){var n=e.node(t),r=e.parent(t),d={v:t};return i.isUndefined(n)||(d.value=n),i.isUndefined(r)||(d.parent=r),d}))}function a(e){return i.map(e.edges(),(function(t){var n=e.edge(t),r={v:t.v,w:t.w};return i.isUndefined(t.name)||(r.name=t.name),i.isUndefined(n)||(r.value=n),r}))}n(5629)},8811:function(e,t,n){n.d(t,{r:function(){return N}});var i=n(7479),r=n(9830),d=n(2874),a=n(6153),o=n(9564),s=n(2372);let l={},c={},h={};const g=(e,t)=>(a.l.trace("In isDecendant",t," ",e," = ",c[t].includes(e)),!!c[t].includes(e)),f=(e,t,n,i)=>{a.l.warn("Copying children of ",e,"root",i,"data",t.node(e),i);const r=t.children(e)||[];e!==i&&r.push(e),a.l.warn("Copying (nodes) clusterId",e,"nodes",r),r.forEach((r=>{if(t.children(r).length>0)f(r,t,n,i);else{const d=t.node(r);a.l.info("cp ",r," to ",i," with parent ",e),n.setNode(r,d),i!==t.parent(r)&&(a.l.warn("Setting parent",r,t.parent(r)),n.setParent(r,t.parent(r))),e!==i&&r!==e?(a.l.debug("Setting parent",r,e),n.setParent(r,e)):(a.l.info("In copy ",e,"root",i,"data",t.node(e),i),a.l.debug("Not Setting parent for node=",r,"cluster!==rootId",e!==i,"node!==clusterId",r!==e));const o=t.edges(r);a.l.debug("Copying Edges",o),o.forEach((r=>{a.l.info("Edge",r);const d=t.edge(r.v,r.w,r.name);a.l.info("Edge data",d,i);try{((e,t)=>(a.l.info("Decendants of ",t," is ",c[t]),a.l.info("Edge is ",e),e.v!==t&&e.w!==t&&(c[t]?c[t].includes(e.v)||g(e.v,t)||g(e.w,t)||c[t].includes(e.w):(a.l.debug("Tilt, ",t,",not in decendants"),!1))))(r,i)?(a.l.info("Copying as ",r.v,r.w,d,r.name),n.setEdge(r.v,r.w,d,r.name),a.l.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):a.l.info("Skipping copy of edge ",r.v,"--\x3e",r.w," rootId: ",i," clusterId:",e)}catch(e){a.l.error(e)}}))}a.l.debug("Removing node",r),t.removeNode(r)}))},u=(e,t)=>{const n=t.children(e);let i=[...n];for(const r of n)h[r]=e,i=[...i,...u(r,t)];return i},w=(e,t)=>{a.l.trace("Searching",e);const n=t.children(e);if(a.l.trace("Searching children of id ",e,n),n.length<1)return a.l.trace("This is a valid node",e),e;for(const i of n){const n=w(i,t);if(n)return a.l.trace("Found replacement for",e," => ",n),n}},p=e=>l[e]&&l[e].externalConnections&&l[e]?l[e].id:e,v=(e,t)=>{if(a.l.warn("extractor - ",t,r.c(e),e.children("D")),t>10)return void a.l.error("Bailing out");let n=e.nodes(),i=!1;for(const t of n){const n=e.children(t);i=i||n.length>0}if(i){a.l.debug("Nodes = ",n,t);for(const i of n)if(a.l.debug("Extracting node",i,l,l[i]&&!l[i].externalConnections,!e.parent(i),e.node(i),e.children("D")," Depth ",t),l[i])if(!l[i].externalConnections&&e.children(i)&&e.children(i).length>0){a.l.warn("Cluster without external connections, without a parent and with children",i,t);let n="TB"===e.graph().rankdir?"LR":"TB";l[i]&&l[i].clusterData&&l[i].clusterData.dir&&(n=l[i].clusterData.dir,a.l.warn("Fixing dir",l[i].clusterData.dir,n));const d=new o.k({multigraph:!0,compound:!0}).setGraph({rankdir:n,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));a.l.warn("Old graph before copy",r.c(e)),f(i,e,d,i),e.setNode(i,{clusterNode:!0,id:i,clusterData:l[i].clusterData,labelText:l[i].labelText,graph:d}),a.l.warn("New graph after copy node: (",i,")",r.c(d)),a.l.debug("Old graph after copy",r.c(e))}else a.l.warn("Cluster ** ",i," **not meeting the criteria !externalConnections:",!l[i].externalConnections," no parent: ",!e.parent(i)," children ",e.children(i)&&e.children(i).length>0,e.children("D"),t),a.l.debug(l);else a.l.debug("Not a cluster",i,t);n=e.nodes(),a.l.warn("New list of nodes",n);for(const i of n){const n=e.node(i);a.l.warn(" Now next level",i,n),n.clusterNode&&v(n.graph,t+1)}}else a.l.debug("Done, no node has children",e.nodes())},y=(e,t)=>{if(0===t.length)return[];let n=Object.assign(t);return t.forEach((t=>{const i=e.children(t),r=y(e,i);n=[...n,...r]})),n},x={rect:(e,t)=>{a.l.trace("Creating subgraph rect for ",t.id,t);const n=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),i=n.insert("rect",":first-child"),r=n.insert("g").attr("class","cluster-label"),o=r.node().appendChild((0,d.c)(t.labelText,t.labelStyle,void 0,!0));let l=o.getBBox();if((0,a.j)((0,a.g)().flowchart.htmlLabels)){const e=o.children[0],t=(0,s.Ys)(o);l=e.getBoundingClientRect(),t.attr("width",l.width),t.attr("height",l.height)}const c=0*t.padding,h=c/2,g=t.width<=l.width+c?l.width+c:t.width;t.width<=l.width+c?t.diff=(l.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,a.l.trace("Data ",t,JSON.stringify(t)),i.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-g/2).attr("y",t.y-t.height/2-h).attr("width",g).attr("height",t.height+c),r.attr("transform","translate("+(t.x-l.width/2)+", "+(t.y-t.height/2)+")");const f=i.node().getBBox();return t.width=f.width,t.height=f.height,t.intersect=function(e){return(0,d.i)(t,e)},n},roundedWithTitle:(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),i=n.insert("rect",":first-child"),r=n.insert("g").attr("class","cluster-label"),o=n.append("rect"),l=r.node().appendChild((0,d.c)(t.labelText,t.labelStyle,void 0,!0));let c=l.getBBox();if((0,a.j)((0,a.g)().flowchart.htmlLabels)){const e=l.children[0],t=(0,s.Ys)(l);c=e.getBoundingClientRect(),t.attr("width",c.width),t.attr("height",c.height)}c=l.getBBox();const h=0*t.padding,g=h/2,f=t.width<=c.width+t.padding?c.width+t.padding:t.width;t.width<=c.width+t.padding?t.diff=(c.width+0*t.padding-t.width)/2:t.diff=-t.padding/2,i.attr("class","outer").attr("x",t.x-f/2-g).attr("y",t.y-t.height/2-g).attr("width",f+h).attr("height",t.height+h),o.attr("class","inner").attr("x",t.x-f/2-g).attr("y",t.y-t.height/2-g+c.height-1).attr("width",f+h).attr("height",t.height+h-c.height-3),r.attr("transform","translate("+(t.x-c.width/2)+", "+(t.y-t.height/2-t.padding/3+((0,a.j)((0,a.g)().flowchart.htmlLabels)?5:3))+")");const u=i.node().getBBox();return t.height=u.height,t.intersect=function(e){return(0,d.i)(t,e)},n},noteGroup:(e,t)=>{const n=e.insert("g").attr("class","note-cluster").attr("id",t.id),i=n.insert("rect",":first-child"),r=0*t.padding,a=r/2;i.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2-a).attr("width",t.width+r).attr("height",t.height+r).attr("fill","none");const o=i.node().getBBox();return t.width=o.width,t.height=o.height,t.intersect=function(e){return(0,d.i)(t,e)},n},divider:(e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),i=n.insert("rect",":first-child"),r=0*t.padding,a=r/2;i.attr("class","divider").attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2).attr("width",t.width+r).attr("height",t.height+r);const o=i.node().getBBox();return t.width=o.width,t.height=o.height,t.diff=-t.padding/2,t.intersect=function(e){return(0,d.i)(t,e)},n}};let m={};const b=(e,t,n,o)=>{a.l.info("Graph in recursive render: XXX",r.c(t),o);const s=t.graph().rankdir;a.l.trace("Dir in recursive render - dir:",s);const c=e.insert("g").attr("class","root");t.nodes()?a.l.info("Recursive render XXX",t.nodes()):a.l.info("No nodes found for",t),t.edges().length>0&&a.l.trace("Recursive edges",t.edge(t.edges()[0]));const h=c.insert("g").attr("class","clusters"),g=c.insert("g").attr("class","edgePaths"),f=c.insert("g").attr("class","edgeLabels"),u=c.insert("g").attr("class","nodes");t.nodes().forEach((function(e){const i=t.node(e);if(void 0!==o){const n=JSON.parse(JSON.stringify(o.clusterData));a.l.info("Setting data for cluster XXX (",e,") ",n,o),t.setNode(o.id,n),t.parent(e)||(a.l.trace("Setting parent",e,o.id),t.setParent(e,o.id,n))}if(a.l.info("(Insert) Node XXX"+e+": "+JSON.stringify(t.node(e))),i&&i.clusterNode){a.l.info("Cluster identified",e,i.width,t.node(e));const r=b(u,i.graph,n,t.node(e)),o=r.elem;(0,d.u)(i,o),i.diff=r.diff||0,a.l.info("Node bounds (abc123)",e,i,i.width,i.x,i.y),(0,d.s)(o,i),a.l.warn("Recursive render complete ",o,i)}else t.children(e).length>0?(a.l.info("Cluster - the non recursive path XXX",e,i.id,i,t),a.l.info(w(i.id,t)),l[i.id]={id:w(i.id,t),node:i}):(a.l.info("Node - the non recursive path",e,i.id,i),(0,d.e)(u,t.node(e),s))})),t.edges().forEach((function(e){const n=t.edge(e.v,e.w,e.name);a.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),a.l.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(t.edge(e))),a.l.info("Fix",l,"ids:",e.v,e.w,"Translateing: ",l[e.v],l[e.w]),(0,d.f)(f,n)})),t.edges().forEach((function(e){a.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e))})),a.l.info("#############################################"),a.l.info("###                Layout                 ###"),a.l.info("#############################################"),a.l.info(t),(0,i.bK)(t),a.l.info("Graph after layout:",r.c(t));let p=0;return(e=>y(e,e.children()))(t).forEach((function(e){const n=t.node(e);a.l.info("Position "+e+": "+JSON.stringify(t.node(e))),a.l.info("Position "+e+": ("+n.x,","+n.y,") width: ",n.width," height: ",n.height),n&&n.clusterNode?(0,d.p)(n):t.children(e).length>0?(((e,t)=>{a.l.trace("Inserting cluster");const n=t.shape||"rect";m[t.id]=x[n](e,t)})(h,n),l[n.id].node=n):(0,d.p)(n)})),t.edges().forEach((function(e){const i=t.edge(e);a.l.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(i),i);const r=(0,d.g)(g,e,i,l,n,t);(0,d.h)(i,r)})),t.nodes().forEach((function(e){const n=t.node(e);a.l.info(e,n.type,n.diff),"group"===n.type&&(p=n.diff)})),{elem:c,diff:p}},N=(e,t,n,i,o)=>{(0,d.a)(e,n,i,o),(0,d.b)(),(0,d.d)(),m={},c={},h={},l={},a.l.warn("Graph at first:",r.c(t)),((e,t)=>{e?(a.l.debug("Opting in, graph "),e.nodes().forEach((function(t){e.children(t).length>0&&(a.l.warn("Cluster identified",t," Replacement id in edges: ",w(t,e)),c[t]=u(t,e),l[t]={id:w(t,e),clusterData:e.node(t)})})),e.nodes().forEach((function(t){const n=e.children(t),i=e.edges();n.length>0?(a.l.debug("Cluster identified",t,c),i.forEach((e=>{e.v!==t&&e.w!==t&&g(e.v,t)^g(e.w,t)&&(a.l.warn("Edge: ",e," leaves cluster ",t),a.l.warn("Decendants of XXX ",t,": ",c[t]),l[t].externalConnections=!0)}))):a.l.debug("Not a cluster ",t,c)})),e.edges().forEach((function(t){const n=e.edge(t);a.l.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),a.l.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let i=t.v,r=t.w;if(a.l.warn("Fix XXX",l,"ids:",t.v,t.w,"Translating: ",l[t.v]," --- ",l[t.w]),l[t.v]&&l[t.w]&&l[t.v]===l[t.w]){a.l.warn("Fixing and trixing link to self - removing XXX",t.v,t.w,t.name),a.l.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),i=p(t.v),r=p(t.w),e.removeEdge(t.v,t.w,t.name);const d=t.w+"---"+t.v;e.setNode(d,{domId:d,id:d,labelStyle:"",labelText:n.label,padding:0,shape:"labelRect",style:""});const o=JSON.parse(JSON.stringify(n)),s=JSON.parse(JSON.stringify(n));o.label="",o.arrowTypeEnd="none",s.label="",o.fromCluster=t.v,s.toCluster=t.v,e.setEdge(i,d,o,t.name+"-cyclic-special"),e.setEdge(d,r,s,t.name+"-cyclic-special")}else(l[t.v]||l[t.w])&&(a.l.warn("Fixing and trixing - removing XXX",t.v,t.w,t.name),i=p(t.v),r=p(t.w),e.removeEdge(t.v,t.w,t.name),i!==t.v&&(n.fromCluster=t.v),r!==t.w&&(n.toCluster=t.w),a.l.warn("Fix Replacing with XXX",i,r,t.name),e.setEdge(i,r,n,t.name))})),a.l.warn("Adjusted Graph",r.c(e)),v(e,0),a.l.trace(l)):a.l.debug("Opting out, no graph ")})(t),a.l.warn("Graph after:",r.c(t)),b(e,t,i)}}}]);